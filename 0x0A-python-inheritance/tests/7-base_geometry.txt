===============================
7. Integer validator module
===============================

Import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()


Function:
=========
Write a class BaseGeometry (based on 6-base_geometry.py).

    * You can assume name is always a string
    * If value is not an integer: raises a TypeError exception
    * If value is less or equal to 0: raises a ValueError exception


Section // No exceptions
=========================

Test case #0: A test case with good parameters
    
    >>> bg.integer_validator("my_int", 12)


Test case #1: A test case with good parameters

    >>> bg.integer_validator("width", 89)


Section // Type Errors
=========================

Test case #2: A test case with a not integer value

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #3: A test case with a infinite float value

    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] inf_float must be an integer

Test case #4: A test case with a NaN value

    >>> try:
    ...     bg.integer_validator("NaN", float('NaN'))
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] NaN must be an integer

Test case #5: A test case with a boolean value

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #6: A test case with a tuple value

    >>> try:
    ...     bg.integer_validator("name", (4, ))
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #7: A test case with a string value

    >>> try:
    ...     bg.integer_validator("name", 'Monty Python')
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #8: A test case with a none value

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #9: A test case with a list value

    >>> try:
    ...     bg.integer_validator("name", [])
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test case #10: A test case with a dictionary value

    >>> try:
    ...     bg.integer_validator("name", {3, 4})
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test Case #11: Evaluating exception behavior when a class object is passed as
               an argument.

    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] name must be an integer

Test Case #12: Evaluating exception behavior when the value argument is missing.

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test Case #13: Evaluating behavior with an empty input.

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'


Section // Value Errors
=========================

Test Case #14: Assessing the functionality with a value of zero

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [ValueError] age must be greater than 0

Test Case #15: Evaluating the behavior with a negative input value.

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [ValueError] distance must be greater than 0


Section // General Errors
=========================

Test Case #16: Attempting to use a non-existent method

    >>> try:
    ...     bg.area()
    ... except Exception as err:
    ...     print("[{}] {}".format(err.__class__.__name__, err))
    [Exception] area() is not implemented
