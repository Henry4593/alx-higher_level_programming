
================================
"100-matrix_mul.py" module usage
================================

This module defines a matrix multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
The function ``matrix_mul(...)`` generates a new matrix,
representing the product of matrices ``m_a`` and ``m_b`` (multiplication).

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [5, 6],
    ... [7, 8],
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    [[67, 78], [91, 106]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10]]

The function accepts floating-point numbers seamlessly alongside integers.

::

    >>> m_a = [
    ... [1.2, 2.3, 3.4],
    ... [4.55, 5.6, -6.7]
    ... ]
    >>> m_b = [
    ... [2.0, 2.1],
    ... [-2.2, 2.3],
    ... [2.4, 2.5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[5.5, 16.31], [-19.3, 5.685]]

Integers and floats can be combined.

::

    >>> m_a = [
    ... [1, 2.2, 3.3, 4],
    ... [5, 6, 7, 8.8],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [4.0, 5.5, 6],
    ... [7, 8, 9],
    ... [10.01, 11, 12.3]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

Function requires at least two arguments;
failure to do so results in a TypeError.

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'


ValueErrors
===========

Multiplication is undefined for matrices with mismatched dimensions.
A ValueError is raised to indicate this error.

::

    >>> m_a = [
    ... [2, 3],
    ... [4, 5],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied


Both matrices (``m_a`` and ``m_b``) must be non-empty, or a ValueError occurs.
::

    >>> print(matrix_mul([], [[4, 2]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::

    >>> print(matrix_mul([[3, 6]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty

::

    >>> print(matrix_mul([[]], []))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Invalid Matrices
================

Both ``m_a`` and ``m_b`` must be lists; non-list inputs trigger a TypeError.

::

    >>> print(matrix_mul("NOT a list", [[3, 7]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul([[7, 5]], "NOT a list"))
    Traceback (most recent call last):
    TypeError: m_b must be a list

::

    >>> print(matrix_mul("NOT a list0", "NOT a list1"))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: m_a must be a list

Not just any list - they *must* be lists of lists!

::

    >>> print(matrix_mul([3, 2], [[1, 5]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::

    >>> print(matrix_mul([[3, 5]], [2, 7]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

::

    >>> print(matrix_mul([1, 9], [7, 3]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

And not just any list of lists - they *must* be lists of lists containing
integers or floats!

::

    >>> print(matrix_mul([[1, "NaN"]], [[3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

::

    >>> print(matrix_mul([[5, 3]], [[{"b": 7}, 4.8]]))
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

::

    >>> print(matrix_mul([[3, "NaN"]], [[{"c": 4}, 8.4]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, a TypeError is raised.

::

    >>> m_a = [
    ... [3, 2],
    ... [1, 2, 5]
    ... ]
    >>> m_b = [
    ... [7, 5],
    ... [3, 2]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

::

    >>> m_a = [
    ... [3, 9],
    ... [6, 4]
    ... ]
    >>> m_b = [
    ... [1, 4],
    ... [3, 5, 1]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must should be of the same size

::

    >>> m_a = [
    ... [2, 1],
    ... [2, 3, 5]
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size
